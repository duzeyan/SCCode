void CMapCreat1Dlg::ReadNodeFile(char *file)
{
    if (mapopen == 0)
	{
		MessageBox("未加载地图!", "警告", MB_OK);
		return;
	}
	vector<string>strnode;
	ifstream f_task;
	string line;
	int ludiannum;
	int i;
	f_task.open(file);
	if (f_task.is_open())
	{
		//step1--------一次读入路点文件，存到string的vector容器中
		while (getline(f_task, line))
		{
			strnode.push_back(line);
		}
		f_task.close();
		//step2--------读取每一行，将每一行中的单词依次读入结构体RoadFileNode数组m_roadnode中
		vector<string>::iterator iter = strnode.begin();
		string temp;
		int n = 0;
		while (iter != strnode.end())
		{
			temp = *iter;
			istringstream stream(temp);
			stream >> m_roadnode[n].num      >> m_roadnode[n].longtitude
				   >> m_roadnode[n].latitude >> m_roadnode[n].hight
				   >> m_roadnode[n].shuxing1 >> m_roadnode[n].shuxing2;
			iter++;
			n++;
		}
		//step3--------从路点文件中获得  MAP全局地图  所用的信息定位路点中的属性1的值为0（起点）1（拐点入口）7（终点）的点
		//其中包括在路网中和不在路网中的,存在结构体ROADNODE中m_roadlocation[300]数组中;
		int num = 0;
		int j = 0;
		int t = 0;
		for (i = 0; i < n; i++)
		{
			if (m_roadnode[i].shuxing1 == 0 || m_roadnode[i].shuxing1 == 7 || m_roadnode[i].shuxing1 == 1)
			{
				int result = RoadNodeLocation(m_roadnode[i].longtitude, m_roadnode[i].latitude);
				//找到最近的点
				if (result == -1)
				{
					num++;
					m_roadlocation[j].num = num;
					m_roadlocation[j].longtitude = m_roadnode[i].longtitude;//以分为单位
					m_roadlocation[j].latitude = m_roadnode[i].latitude;
					m_roadlocation[j].noderesult = --t;//不在路网中的点一次减小
					m_roadlocation[j].shuxing1 = m_roadnode[i].shuxing1;
					m_roadlocation[j].shuxing2 = m_roadnode[i].shuxing2;
					m_roadlocation[j].duiyingludianbianhao=m_roadnode[i].num;
					j++;
				}
				else if (result >= notecounter)//定位到线
				{
				   //不作处理
				}
				else//定位到点
				{	
					num++;
					if (j>=1)
					{
                       if ((result+1)!=m_roadlocation[j-1].noderesult)
                       {
						   	m_roadlocation[j].num = num;
				     	    m_roadlocation[j].longtitude = m_roadnode[i].longtitude;
				        	m_roadlocation[j].latitude = m_roadnode[i].latitude;
					        m_roadlocation[j].noderesult = result + 1;
					        m_roadlocation[j].shuxing1 = m_roadnode[i].shuxing1;
					        m_roadlocation[j].shuxing2 = m_roadnode[i].shuxing2;
							m_roadlocation[j].duiyingludianbianhao=m_roadnode[i].num;
					        j++;	   
                       }
					}
					else
					{
						m_roadlocation[j].num = num;
				     	m_roadlocation[j].longtitude = m_roadnode[i].longtitude;
				    	m_roadlocation[j].latitude = m_roadnode[i].latitude;
					    m_roadlocation[j].noderesult = result + 1;
					    m_roadlocation[j].shuxing1 = m_roadnode[i].shuxing1;
					    m_roadlocation[j].shuxing2 = m_roadnode[i].shuxing2;
						m_roadlocation[j].duiyingludianbianhao=m_roadnode[i].num;
					    j++;
					}	
				}
			}
		}
		//写原始任务点文件InitialNodeQueue
		FILE *pf = fopen("InitialNodeQueue.db", "wb");
		fwrite(m_roadlocation, sizeof(ROADNODE), j, pf);
		fclose(pf);
		//写完后测试读
		FILE *dd = fopen("InitialNodeQueue.db", "rb");
		ROADNODE b[100];
		fseek(dd, 0L, SEEK_END);
		int size = ftell(dd) / sizeof(ROADNODE);
		fseek(dd, 0L, SEEK_SET);
		fread(b, sizeof(ROADNODE), size, dd);
		fclose(dd);